/* CREATE TABLES */

CREATE TABLE COUNTRY
(
  ID   NUMBER      NOT NULL PRIMARY KEY,
  NAME VARCHAR(25) NOT NULL
);
/

CREATE TABLE CITY
(
  ID         NUMBER      NOT NULL PRIMARY KEY,
  NAME       VARCHAR(25) NOT NULL,
  PLATE_NO   VARCHAR(25),
  COUNTRY_ID NUMBER      NOT NULL CONSTRAINT COUNTRY_ID REFERENCES COUNTRY ON DELETE CASCADE
);
/

CREATE TABLE COUNTY
(
  ID      NUMBER      NOT NULL PRIMARY KEY,
  NAME    VARCHAR(25) NOT NULL,
  CITY_ID NUMBER      NOT NULL CONSTRAINT COUNTY_CITY_ID_FK REFERENCES CITY ON DELETE CASCADE
);
/

CREATE TABLE BRANCH
(
  ID        NUMBER      NOT NULL PRIMARY KEY,
  NAME      VARCHAR(25) NOT NULL,
  COUNTY_ID NUMBER      NOT NULL CONSTRAINT BRANCH_COUNTY_ID_FK REFERENCES COUNTY ON DELETE CASCADE
);
/

CREATE TABLE BRAND
(
  ID          NUMBER      NOT NULL PRIMARY KEY,
  NAME        VARCHAR(25) NOT NULL,
  NATIONALITY VARCHAR(25)
);
/

CREATE TABLE ENGINE
(
  ID     NUMBER NOT NULL PRIMARY KEY,
  VOLUME VARCHAR(25),
  POWER  VARCHAR(25)
);
/


CREATE TABLE GEAR
(
  ID    NUMBER      NOT NULL PRIMARY KEY,
  TYPE  VARCHAR(25) NOT NULL,
  COUNT NUMBER
);
/

CREATE TABLE MODEL
(
  ID           NUMBER      NOT NULL PRIMARY KEY,
  NAME         VARCHAR(25) NOT NULL,
  BRAND_ID     NUMBER,
  ENGINE_ID    NUMBER,
  FUEL_TYPE    VARCHAR(25) NOT NULL,
  GEAR_ID      NUMBER,
  VEHICLE_TYPE VARCHAR(10) NOT NULL
);
/

CREATE TABLE VEHICLE
(
  ID         NUMBER NOT NULL PRIMARY KEY,
  KILOMETER  NUMBER,
  PLATE      VARCHAR(25),
  YEAR       NUMBER,
  IMAGE_PATH VARCHAR(150),
  MODEL_ID   NUMBER NOT NULL CONSTRAINT MODEL_MODEL_ID_FK REFERENCES MODEL ON DELETE CASCADE
);
/


CREATE TABLE MOTORCYCLE
(
  VEHICLE_ID      NUMBER      NOT NULL PRIMARY KEY CONSTRAINT MOTORCYCLE_VEHICLE_ID_FK REFERENCES VEHICLE ON DELETE CASCADE,
  MOTORCYCLE_TYPE VARCHAR(25) NOT NULL
);
/

CREATE TABLE BUS
(
  VEHICLE_ID         NUMBER NOT NULL PRIMARY KEY CONSTRAINT BUS_VEHICLE_ID_FK REFERENCES VEHICLE ON DELETE CASCADE,
  PASSENGER_CAPACITY NUMBER
);
/

CREATE TABLE BRANCH_RLTD_VEHICLE
(
  ID           NUMBER              NOT NULL PRIMARY KEY,
  VEHICLE_ID   NUMBER              NOT NULL CONSTRAINT BRCH_RLTD_VHCL_VEHICLE_ID_FK REFERENCES VEHICLE ON DELETE CASCADE,
  BRANCH_ID    NUMBER              NOT NULL CONSTRAINT BRCH_RLTD_VHCL_BRANCH_ID_FK REFERENCES BRANCH ON DELETE CASCADE,
  IS_AVAILABLE NUMBER(1) DEFAULT 1 NOT NULL,
  PRICE        NUMBER              NOT NULL
);
/


CREATE TABLE "USER"
(
  ID         NUMBER                        NOT NULL PRIMARY KEY,
  USER_TYPE  VARCHAR2(15) DEFAULT 'MEMBER' NOT NULL,
  FIRST_NAME VARCHAR(25),
  LAST_NAME  VARCHAR(25),
  USERNAME   VARCHAR(25)                   NOT NULL,
  EMAIL      VARCHAR(50),
  PHONE      VARCHAR(25),
  PASSWORD   VARCHAR(150)
);
/

CREATE UNIQUE INDEX USER_USERNAME_UINDEX
  ON "USER" (USERNAME)
/

CREATE TABLE HIRE
(
  BRANCH_RLTD_VEHICLE_ID NUMBER      NOT NULL CONSTRAINT HIRE_BRANCH_RLTD_VEHICLE_ID_FK REFERENCES BRANCH_RLTD_VEHICLE ON DELETE CASCADE,
  USER_ID                NUMBER      NOT NULL CONSTRAINT HIRE_USER_ID_FK REFERENCES "USER" ON DELETE CASCADE,
  PAYMENT_TYPE           VARCHAR(25) NOT NULL,
  START_DATE             DATE        NOT NULL,
  DUE_DATE               DATE        NOT NULL,
  CONSTRAINT HIRE__PK PRIMARY KEY (BRANCH_RLTD_VEHICLE_ID, USER_ID, START_DATE)
);
/

CREATE TABLE TRUCK
(
  VEHICLE_ID     NUMBER      NOT NULL PRIMARY KEY CONSTRAINT TRUCK_VEHICLE_ID_FK REFERENCES VEHICLE ON DELETE CASCADE,
  BALE_CAPACITY  NUMBER,
  TRAILER_VOLUME NUMBER,
  TRAILER_TYPE   VARCHAR(25) NOT NULL
);
/

CREATE TABLE FRAME_TYPE
(
  ID         NUMBER      NOT NULL PRIMARY KEY,
  NAME       VARCHAR(25) NOT NULL,
  DOOR_COUNT NUMBER
);
/

CREATE TABLE EQUIPMENT_PACKAGE
(
  ID                 NUMBER      NOT NULL PRIMARY KEY,
  PACKAGE_NAME       VARCHAR(25) NOT NULL,
  ALARM              NUMBER(1),
  ABS                NUMBER(1),
  ISOFIX             NUMBER(1),
  IMMOBILIZER        NUMBER(1),
  AIRBAG_COUNT       NUMBER,
  TRIP_COMPUTER      NUMBER(1),
  START_STOP         NUMBER(1),
  CRUISE_CONTROL     NUMBER(1),
  AIR_CONDITIONING   NUMBER(1),
  SUNROOF            NUMBER(1),
  PARKING_SENSOR     NUMBER(1),
  STEEL_WHEEL        NUMBER(1),
  RAIN_SENSOR        NUMBER(1),
  HEAD_LIGHTS_SENSOR NUMBER(1),
  NAVIGATION         NUMBER(1),
  ASSISTANT_CAMERAS  NUMBER(1),
  HILL_HOLDER        NUMBER(1)
);
/

CREATE TABLE CAR
(
  VEHICLE_ID           NUMBER NOT NULL PRIMARY KEY CONSTRAINT CAR_VEHICLE_ID_FK REFERENCES VEHICLE ON DELETE CASCADE,
  FRAME_TYPE_ID        NUMBER NOT NULL CONSTRAINT CAR_FRAME_TYPE_ID_FK REFERENCES FRAME_TYPE ON DELETE CASCADE,
  SEGMENT              VARCHAR(3),
  EQUIPMENT_PACKAGE_ID NUMBER NOT NULL CONSTRAINT CAR_EQUIPMENT_PACKAGE_ID_FK REFERENCES EQUIPMENT_PACKAGE ON DELETE CASCADE
);
/

CREATE TABLE BRANCH_RLTD_USER
(
  BRANCH_ID NUMBER NOT NULL CONSTRAINT BRANCH_RLTD_USER_BRANCH_ID_FK REFERENCES BRANCH ON DELETE CASCADE,
  USER_ID   NUMBER NOT NULL CONSTRAINT BRANCH_RLTD_USER_USER_ID_FK REFERENCES "USER" ON DELETE CASCADE,
  CONSTRAINT B_RLTD_U_BRNC_ID_USER_ID_PK PRIMARY KEY (BRANCH_ID, USER_ID)
);
/

CREATE TABLE USER_LOG
(
  ID          NUMBER               NOT NULL PRIMARY KEY,
  USER_ID     NUMBER               NOT NULL CONSTRAINT USER_LOG_USER_ID_FK REFERENCES "USER" ON DELETE CASCADE,
  DESCRIPTION VARCHAR(250),
  LOG_DATE    DATE DEFAULT SYSDATE NOT NULL
);
/


/* AUTO INCREMENT FIELDS */

CREATE SEQUENCE COUNTRY_ID_SEQ;
/

CREATE OR REPLACE TRIGGER COUNTRY_ID_TRG
  BEFORE INSERT
  ON COUNTRY
  FOR EACH ROW

  BEGIN
    SELECT COUNTRY_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE CITY_ID_SEQ;
/

CREATE OR REPLACE TRIGGER CITY_ID_TRG
  BEFORE INSERT
  ON CITY
  FOR EACH ROW

  BEGIN
    SELECT CITY_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE COUNTY_ID_SEQ;
/

CREATE OR REPLACE TRIGGER COUNTY_ID_TRG
  BEFORE INSERT
  ON COUNTY
  FOR EACH ROW

  BEGIN
    SELECT COUNTY_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE BRANCH_ID_SEQ;
/

CREATE OR REPLACE TRIGGER BRANCH_ID_TRG
  BEFORE INSERT
  ON BRANCH
  FOR EACH ROW

  BEGIN
    SELECT BRANCH_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE BRANCH_RLTD_VEHICLE_ID_SEQ;
/

CREATE OR REPLACE TRIGGER BRANCH_RLTD_VEHICLE_ID_TRG
  BEFORE INSERT
  ON BRANCH_RLTD_VEHICLE
  FOR EACH ROW

  BEGIN
    SELECT BRANCH_RLTD_VEHICLE_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/

CREATE SEQUENCE BRAND_ID_SEQ;
/

CREATE OR REPLACE TRIGGER BRAND_ID_TRG
  BEFORE INSERT
  ON BRAND
  FOR EACH ROW

  BEGIN
    SELECT BRAND_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE ENGINE_ID_SEQ;
/

CREATE OR REPLACE TRIGGER ENGINE_ID_TRG
  BEFORE INSERT
  ON ENGINE
  FOR EACH ROW

  BEGIN
    SELECT ENGINE_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE EQUIPMENT_PACKAGE_ID_SEQ;
/

CREATE OR REPLACE TRIGGER EQUIPMENT_PACKAGE_ID_TRG
  BEFORE INSERT
  ON EQUIPMENT_PACKAGE
  FOR EACH ROW

  BEGIN
    SELECT EQUIPMENT_PACKAGE_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE FRAME_TYPE_ID_SEQ;
/

CREATE OR REPLACE TRIGGER FRAME_TYPE_ID_TRG
  BEFORE INSERT
  ON FRAME_TYPE
  FOR EACH ROW

  BEGIN
    SELECT FRAME_TYPE_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE GEAR_ID_SEQ;
/

CREATE OR REPLACE TRIGGER GEAR_ID_TRG
  BEFORE INSERT
  ON GEAR
  FOR EACH ROW

  BEGIN
    SELECT GEAR_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE MODEL_ID_SEQ;
/

CREATE OR REPLACE TRIGGER MODEL_ID_TRG
  BEFORE INSERT
  ON MODEL
  FOR EACH ROW

  BEGIN
    SELECT MODEL_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE USER_ID_SEQ;
/

CREATE OR REPLACE TRIGGER USER_ID_TRG
  BEFORE INSERT
  ON "USER"
  FOR EACH ROW

  BEGIN
    SELECT USER_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE VEHICLE_ID_SEQ;
/

CREATE OR REPLACE TRIGGER VEHICLE_ID_TRG
  BEFORE INSERT
  ON VEHICLE
  FOR EACH ROW

  BEGIN
    SELECT VEHICLE_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/


CREATE SEQUENCE USER_LOG_ID_SEQ;
/

CREATE OR REPLACE TRIGGER USER_LOG_ID_TRG
  BEFORE INSERT
  ON USER_LOG
  FOR EACH ROW

  BEGIN
    SELECT USER_LOG_ID_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;
/



/* STORED PROCEDURES */


/* COUNTRY */
CREATE OR REPLACE PROCEDURE INSERT_COUNTRY(p_name IN COUNTRY.NAME%TYPE)
IS
  BEGIN

    INSERT INTO COUNTRY ("NAME") VALUES (p_name);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_COUNTRY(
  p_id   IN COUNTRY.ID%TYPE,
  p_name IN COUNTRY.NAME%TYPE)
IS
  BEGIN

    UPDATE COUNTRY
    SET NAME = p_name
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_COUNTRY(p_id IN COUNTRY.ID%TYPE)
IS
  BEGIN

    DELETE FROM COUNTRY
    WHERE ID = p_id;

  END;
/


/* CITY */
CREATE OR REPLACE PROCEDURE INSERT_CITY(
  p_name       IN CITY.NAME%TYPE,
  p_plate_no   IN CITY.PLATE_NO%TYPE,
  p_country_id IN CITY.COUNTRY_ID%TYPE)
IS
  BEGIN

    INSERT INTO CITY ("NAME", "PLATE_NO", "COUNTRY_ID") VALUES (p_name, p_plate_no, p_country_id);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_CITY(
  p_id         IN CITY.ID%TYPE,
  p_name       IN CITY.NAME%TYPE,
  p_plate_no   IN CITY.PLATE_NO%TYPE,
  p_country_id IN CITY.COUNTRY_ID%TYPE)
IS
  BEGIN

    UPDATE CITY
    SET NAME = p_name, PLATE_NO = p_plate_no, COUNTRY_ID = p_country_id
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_CITY(p_id IN CITY.ID%TYPE)
IS
  BEGIN

    DELETE FROM CITY
    WHERE ID = p_id;

  END;
/


/* COUNTY */
CREATE OR REPLACE PROCEDURE INSERT_COUNTY(
  p_name    IN COUNTY.NAME%TYPE,
  p_city_id IN COUNTY.CITY_ID%TYPE)
IS
  BEGIN

    INSERT INTO COUNTY ("NAME", "CITY_ID") VALUES (p_name, p_city_id);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_COUNTY(
  p_id      IN COUNTY.ID%TYPE,
  p_name    IN COUNTY.NAME%TYPE,
  p_city_id IN COUNTY.CITY_ID%TYPE)
IS
  BEGIN

    UPDATE COUNTY
    SET NAME = p_name, CITY_ID = p_city_id
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_COUNTY(p_id IN COUNTY.ID%TYPE)
IS
  BEGIN

    DELETE FROM COUNTY
    WHERE ID = p_id;

  END;
/


/* BRANCH */
CREATE OR REPLACE PROCEDURE INSERT_BRANCH(
  p_name      IN  BRANCH.NAME%TYPE,
  p_county_id IN  BRANCH.COUNTY_ID%TYPE,
  r_branch_id OUT BRANCH.ID%TYPE)
IS
  BEGIN

    INSERT INTO BRANCH ("NAME", "COUNTY_ID") VALUES (p_name, p_county_id)
    RETURNING ID INTO r_branch_id;

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BRANCH(
  p_id        IN BRANCH.ID%TYPE,
  p_name      IN BRANCH.NAME%TYPE,
  p_county_id IN BRANCH.COUNTY_ID%TYPE)
IS
  BEGIN

    UPDATE BRANCH
    SET NAME = p_name, COUNTY_ID = p_county_id
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_BRANCH(p_id IN BRANCH.ID%TYPE)
IS
  BEGIN

    DELETE FROM BRANCH
    WHERE ID = p_id;

  END;
/


/* BRANCH_RLTD_USER */
CREATE OR REPLACE PROCEDURE INSERT_BRANCH_RLTD_USER(
  p_branch_id IN BRANCH_RLTD_USER.BRANCH_ID%TYPE,
  p_user_id   IN BRANCH_RLTD_USER.USER_ID%TYPE)
IS
  BEGIN

    INSERT INTO BRANCH_RLTD_USER ("BRANCH_ID", "USER_ID") VALUES (p_branch_id, p_user_id);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BRANCH_RLTD_USER(
  p_branch_id IN BRANCH_RLTD_USER.BRANCH_ID%TYPE,
  p_user_id   IN BRANCH_RLTD_USER.USER_ID%TYPE)
IS
  BEGIN

    UPDATE BRANCH_RLTD_USER
    SET USER_ID = p_user_id
    WHERE BRANCH_ID = p_branch_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_BRANCH_RLTD_USER(
  p_branch_id IN BRANCH_RLTD_USER.BRANCH_ID%TYPE,
  p_user_id   IN BRANCH_RLTD_USER.USER_ID%TYPE)
IS
  BEGIN

    DELETE FROM BRANCH_RLTD_USER
    WHERE USER_ID = p_user_id AND BRANCH_ID = p_branch_id;

  END;
/


/* BRANCH_RLTD_VEHICLE */
CREATE OR REPLACE PROCEDURE INSERT_BRANCH_RLTD_VEHICLE(
  p_vehicle_id   IN BRANCH_RLTD_VEHICLE.VEHICLE_ID%TYPE,
  p_branch_id    IN BRANCH_RLTD_VEHICLE.BRANCH_ID%TYPE,
  p_is_available IN BRANCH_RLTD_VEHICLE.IS_AVAILABLE%TYPE,
  p_price        IN BRANCH_RLTD_VEHICLE.PRICE%TYPE)
IS
  BEGIN

    INSERT INTO BRANCH_RLTD_VEHICLE ("BRANCH_ID", "VEHICLE_ID", "IS_AVAILABLE", "PRICE")
    VALUES (p_branch_id, p_vehicle_id, p_is_available, p_price);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BRANCH_RLTD_VEHICLE(
  p_vehicle_id   IN BRANCH_RLTD_VEHICLE.VEHICLE_ID%TYPE,
  p_branch_id    IN BRANCH_RLTD_VEHICLE.BRANCH_ID%TYPE,
  p_is_available IN BRANCH_RLTD_VEHICLE.IS_AVAILABLE%TYPE,
  p_price        IN BRANCH_RLTD_VEHICLE.PRICE%TYPE)
IS
  BEGIN

    UPDATE BRANCH_RLTD_VEHICLE
    SET BRANCH_ID = p_branch_id, IS_AVAILABLE = p_is_available, PRICE = p_price
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_BRANCH_RLTD_VEHICLE(p_id IN BRANCH_RLTD_VEHICLE.ID%TYPE)
IS
  BEGIN

    DELETE FROM BRANCH_RLTD_VEHICLE
    WHERE ID = p_id;

  END;
/


/* BRAND */
CREATE OR REPLACE PROCEDURE INSERT_BRAND(
  p_name        IN BRAND.NAME%TYPE,
  p_nationality IN BRAND.NATIONALITY%TYPE)
IS
  BEGIN

    INSERT INTO BRAND ("NAME", "NATIONALITY") VALUES (p_name, p_nationality);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BRAND(
  p_id          IN BRAND.ID%TYPE,
  p_name        IN BRAND.NAME%TYPE,
  p_nationality IN BRAND.NATIONALITY%TYPE)
IS
  BEGIN

    UPDATE BRAND
    SET NAME = p_name, NATIONALITY = p_nationality
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_BRAND(p_id IN BRAND.ID%TYPE)
IS
  BEGIN

    DELETE FROM BRAND
    WHERE ID = p_id;

  END;
/


/* BUS */
CREATE OR REPLACE PROCEDURE INSERT_BUS(
  p_vehicle_id         IN BUS.VEHICLE_ID%TYPE,
  p_passenger_capacity IN BUS.PASSENGER_CAPACITY%TYPE)
IS
  BEGIN

    INSERT INTO BUS ("VEHICLE_ID", "PASSENGER_CAPACITY") VALUES (p_vehicle_id, p_passenger_capacity);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BUS(
  p_vehicle_id         IN BUS.VEHICLE_ID%TYPE,
  p_passenger_capacity IN BUS.PASSENGER_CAPACITY%TYPE)
IS
  BEGIN

    UPDATE BUS
    SET PASSENGER_CAPACITY = p_passenger_capacity
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_BUS(p_vehicle_id IN BUS.VEHICLE_ID%TYPE)
IS
  BEGIN

    DELETE FROM BUS
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/


/* CAR */
CREATE OR REPLACE PROCEDURE INSERT_CAR(
  p_vehicle_id           IN CAR.VEHICLE_ID%TYPE,
  p_frame_type_id        IN CAR.FRAME_TYPE_ID%TYPE,
  p_segment              IN CAR.SEGMENT%TYPE,
  p_equipment_package_id IN CAR.EQUIPMENT_PACKAGE_ID%TYPE)
IS
  BEGIN

    INSERT INTO CAR ("VEHICLE_ID", "FRAME_TYPE_ID", "SEGMENT", "EQUIPMENT_PACKAGE_ID")
    VALUES (p_vehicle_id, p_frame_type_id, p_segment, p_equipment_package_id);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_CAR(
  p_vehicle_id           IN CAR.VEHICLE_ID%TYPE,
  p_frame_type_id        IN CAR.FRAME_TYPE_ID%TYPE,
  p_segment              IN CAR.SEGMENT%TYPE,
  p_equipment_package_id IN CAR.EQUIPMENT_PACKAGE_ID%TYPE)
IS
  BEGIN

    UPDATE CAR
    SET FRAME_TYPE_ID = p_frame_type_id, SEGMENT = p_segment, EQUIPMENT_PACKAGE_ID = p_equipment_package_id
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_CAR(p_vehicle_id IN CAR.VEHICLE_ID%TYPE)
IS
  BEGIN

    DELETE FROM CAR
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/


/* ENGINE */
CREATE OR REPLACE PROCEDURE INSERT_ENGINE(
  p_volume IN ENGINE.VOLUME%TYPE,
  p_power  IN ENGINE.POWER%TYPE)
IS
  BEGIN

    INSERT INTO ENGINE ("VOLUME", "POWER") VALUES (p_volume, p_power);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_ENGINE(
  p_id     IN ENGINE.ID%TYPE,
  p_volume IN ENGINE.VOLUME%TYPE,
  p_power  IN ENGINE.POWER%TYPE)
IS
  BEGIN

    UPDATE ENGINE
    SET VOLUME = p_volume, POWER = p_power
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_ENGINE(p_id IN ENGINE.ID%TYPE)
IS
  BEGIN

    DELETE FROM ENGINE
    WHERE ID = p_id;

  END;
/


/* EQUIPMENT_PACKAGE */
CREATE OR REPLACE PROCEDURE INSERT_EQUIPMENT_PACKAGE(
  p_package_name       IN EQUIPMENT_PACKAGE.PACKAGE_NAME%TYPE,
  p_alarm              IN EQUIPMENT_PACKAGE.ALARM%TYPE,
  p_abs                IN EQUIPMENT_PACKAGE.ABS%TYPE,
  p_isofix             IN EQUIPMENT_PACKAGE.ISOFIX%TYPE,
  p_immobilizer        IN EQUIPMENT_PACKAGE.IMMOBILIZER%TYPE,
  p_airbag_count       IN EQUIPMENT_PACKAGE.AIRBAG_COUNT%TYPE,
  p_trip_computer      IN EQUIPMENT_PACKAGE.TRIP_COMPUTER%TYPE,
  p_start_stop         IN EQUIPMENT_PACKAGE.START_STOP%TYPE,
  p_cruise_control     IN EQUIPMENT_PACKAGE.CRUISE_CONTROL%TYPE,
  p_air_conditioning   IN EQUIPMENT_PACKAGE.AIR_CONDITIONING%TYPE,
  p_sunroof            IN EQUIPMENT_PACKAGE.SUNROOF%TYPE,
  p_parking_sensor     IN EQUIPMENT_PACKAGE.PARKING_SENSOR%TYPE,
  p_steel_wheel        IN EQUIPMENT_PACKAGE.STEEL_WHEEL%TYPE,
  p_rain_sensor        IN EQUIPMENT_PACKAGE.RAIN_SENSOR%TYPE,
  p_head_lights_sensor IN EQUIPMENT_PACKAGE.HEAD_LIGHTS_SENSOR%TYPE,
  p_navigation         IN EQUIPMENT_PACKAGE.NAVIGATION%TYPE,
  p_assistant_cameras  IN EQUIPMENT_PACKAGE.ASSISTANT_CAMERAS%TYPE,
  p_hill_holder        IN EQUIPMENT_PACKAGE.HILL_HOLDER%TYPE)
IS
  BEGIN

    INSERT INTO EQUIPMENT_PACKAGE (
      "PACKAGE_NAME", "ALARM", "ABS", "ISOFIX", "IMMOBILIZER", "AIRBAG_COUNT", "TRIP_COMPUTER", "START_STOP", "CRUISE_CONTROL",
      "AIR_CONDITIONING", "SUNROOF", "PARKING_SENSOR", "STEEL_WHEEL", "RAIN_SENSOR", "HEAD_LIGHTS_SENSOR", "NAVIGATION",
      "ASSISTANT_CAMERAS", "HILL_HOLDER"
    )
    VALUES (
      p_package_name, p_alarm, p_abs, p_isofix, p_immobilizer, p_airbag_count, p_trip_computer, p_start_stop,
                      p_cruise_control,
                      p_air_conditioning, p_sunroof, p_parking_sensor, p_steel_wheel, p_rain_sensor,
      p_head_lights_sensor, p_navigation,
      p_assistant_cameras, p_hill_holder
    );

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EQUIPMENT_PACKAGE(
  p_id                 IN EQUIPMENT_PACKAGE.ID%TYPE,
  p_package_name       IN EQUIPMENT_PACKAGE.PACKAGE_NAME%TYPE,
  p_alarm              IN EQUIPMENT_PACKAGE.ALARM%TYPE,
  p_abs                IN EQUIPMENT_PACKAGE.ABS%TYPE,
  p_isofix             IN EQUIPMENT_PACKAGE.ISOFIX%TYPE,
  p_immobilizer        IN EQUIPMENT_PACKAGE.IMMOBILIZER%TYPE,
  p_airbag_count       IN EQUIPMENT_PACKAGE.AIRBAG_COUNT%TYPE,
  p_trip_computer      IN EQUIPMENT_PACKAGE.TRIP_COMPUTER%TYPE,
  p_start_stop         IN EQUIPMENT_PACKAGE.START_STOP%TYPE,
  p_cruise_control     IN EQUIPMENT_PACKAGE.CRUISE_CONTROL%TYPE,
  p_air_conditioning   IN EQUIPMENT_PACKAGE.AIR_CONDITIONING%TYPE,
  p_sunroof            IN EQUIPMENT_PACKAGE.SUNROOF%TYPE,
  p_parking_sensor     IN EQUIPMENT_PACKAGE.PARKING_SENSOR%TYPE,
  p_steel_wheel        IN EQUIPMENT_PACKAGE.STEEL_WHEEL%TYPE,
  p_rain_sensor        IN EQUIPMENT_PACKAGE.RAIN_SENSOR%TYPE,
  p_head_lights_sensor IN EQUIPMENT_PACKAGE.HEAD_LIGHTS_SENSOR%TYPE,
  p_navigation         IN EQUIPMENT_PACKAGE.NAVIGATION%TYPE,
  p_assistant_cameras  IN EQUIPMENT_PACKAGE.ASSISTANT_CAMERAS%TYPE,
  p_hill_holder        IN EQUIPMENT_PACKAGE.HILL_HOLDER%TYPE)
IS
  BEGIN

    UPDATE EQUIPMENT_PACKAGE
    SET
      PACKAGE_NAME       = p_package_name,
      ALARM              = p_alarm,
      ABS                = p_abs,
      ISOFIX             = p_isofix,
      IMMOBILIZER        = p_immobilizer,
      AIRBAG_COUNT       = p_airbag_count,
      TRIP_COMPUTER      = p_trip_computer,
      START_STOP         = p_start_stop,
      CRUISE_CONTROL     = p_cruise_control,
      AIR_CONDITIONING   = p_air_conditioning,
      SUNROOF            = p_sunroof,
      PARKING_SENSOR     = p_parking_sensor,
      STEEL_WHEEL        = p_steel_wheel,
      RAIN_SENSOR        = p_rain_sensor,
      HEAD_LIGHTS_SENSOR = p_head_lights_sensor,
      NAVIGATION         = p_navigation,
      ASSISTANT_CAMERAS  = p_assistant_cameras,
      HILL_HOLDER        = p_hill_holder
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_EQUIPMENT_PACKAGE(p_id IN EQUIPMENT_PACKAGE.ID%TYPE)
IS
  BEGIN

    DELETE FROM EQUIPMENT_PACKAGE
    WHERE ID = p_id;

  END;
/


/* FRAME TYPE */
CREATE OR REPLACE PROCEDURE INSERT_FRAME_TYPE(
  p_name       IN FRAME_TYPE.NAME%TYPE,
  p_door_count IN FRAME_TYPE.DOOR_COUNT%TYPE)
IS
  BEGIN

    INSERT INTO FRAME_TYPE ("NAME", "DOOR_COUNT") VALUES (p_name, p_door_count);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_FRAME_TYPE(
  p_id         IN FRAME_TYPE.ID%TYPE,
  p_name       IN FRAME_TYPE.NAME%TYPE,
  p_door_count IN FRAME_TYPE.DOOR_COUNT%TYPE)
IS
  BEGIN

    UPDATE FRAME_TYPE
    SET NAME = p_name, DOOR_COUNT = p_door_count
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_FRAME_TYPE(p_id IN FRAME_TYPE.ID%TYPE)
IS
  BEGIN

    DELETE FROM FRAME_TYPE
    WHERE ID = p_id;

  END;
/


/* GEAR */
CREATE OR REPLACE PROCEDURE INSERT_GEAR(
  p_type  IN GEAR.TYPE%TYPE,
  p_count IN GEAR.COUNT%TYPE)
IS
  BEGIN

    INSERT INTO GEAR ("TYPE", "COUNT") VALUES (p_type, p_count);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_GEAR(
  p_id    IN GEAR.ID%TYPE,
  p_type  IN GEAR.TYPE%TYPE,
  p_count IN GEAR.COUNT%TYPE)
IS
  BEGIN

    UPDATE GEAR
    SET "TYPE" = p_type, COUNT = p_count
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_GEAR(p_id IN GEAR.ID%TYPE)
IS
  BEGIN

    DELETE FROM GEAR
    WHERE ID = p_id;

  END;
/


/* HIRE */
CREATE OR REPLACE PROCEDURE INSERT_HIRE(
  p_branch_rltd_vehicle_id IN HIRE.BRANCH_RLTD_VEHICLE_ID%TYPE,
  p_user_id                IN HIRE.USER_ID%TYPE,
  p_payment_type           IN HIRE.PAYMENT_TYPE%TYPE,
  p_start_date             IN HIRE.START_DATE%TYPE,
  p_due_date               IN HIRE.DUE_DATE%TYPE)
IS
  BEGIN

    INSERT INTO HIRE ("BRANCH_RLTD_VEHICLE_ID", "USER_ID", "PAYMENT_TYPE", "START_DATE", "DUE_DATE")
    VALUES (p_branch_rltd_vehicle_id, p_user_id, p_payment_type, p_start_date, p_due_date);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_HIRE(
  p_branch_rltd_vehicle_id IN HIRE.BRANCH_RLTD_VEHICLE_ID%TYPE,
  p_user_id                IN HIRE.USER_ID%TYPE,
  p_payment_type           IN HIRE.PAYMENT_TYPE%TYPE,
  p_start_date             IN HIRE.START_DATE%TYPE,
  p_due_date               IN HIRE.DUE_DATE%TYPE)
IS
  BEGIN

    UPDATE HIRE
    SET PAYMENT_TYPE = p_payment_type, DUE_DATE = p_due_date
    WHERE BRANCH_RLTD_VEHICLE_ID = p_branch_rltd_vehicle_id AND USER_ID = p_user_id AND START_DATE = p_start_date;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_HIRE(
  p_branch_rltd_vehicle_id IN HIRE.BRANCH_RLTD_VEHICLE_ID%TYPE,
  p_user_id                IN HIRE.USER_ID%TYPE,
  p_start_date             IN HIRE.START_DATE%TYPE)
IS
  BEGIN

    DELETE FROM HIRE
    WHERE BRANCH_RLTD_VEHICLE_ID = p_branch_rltd_vehicle_id AND USER_ID = p_user_id AND START_DATE = p_start_date;

  END;
/


/* MODEL */
CREATE OR REPLACE PROCEDURE INSERT_MODEL(
  p_name         IN MODEL.NAME%TYPE,
  p_brand_id     IN MODEL.BRAND_ID%TYPE,
  p_engine_id    IN MODEL.ENGINE_ID%TYPE,
  p_gear_id      IN MODEL.GEAR_ID%TYPE,
  p_fuel_type    IN MODEL.FUEL_TYPE%TYPE,
  p_vehicle_type IN MODEL.VEHICLE_TYPE%TYPE)
IS
  BEGIN

    INSERT INTO MODEL ("NAME", "BRAND_ID", "ENGINE_ID", "GEAR_ID", "FUEL_TYPE", "VEHICLE_TYPE")
    VALUES (p_name, p_brand_id, p_engine_id, p_gear_id, p_fuel_type, p_vehicle_type);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_MODEL(
  p_id           IN MODEL.ID%TYPE,
  p_name         IN MODEL.NAME%TYPE,
  p_brand_id     IN MODEL.BRAND_ID%TYPE,
  p_engine_id    IN MODEL.ENGINE_ID%TYPE,
  p_gear_id      IN MODEL.GEAR_ID%TYPE,
  p_fuel_type    IN MODEL.FUEL_TYPE%TYPE,
  p_vehicle_type IN MODEL.VEHICLE_TYPE%TYPE)
IS
  BEGIN

    UPDATE MODEL
    SET "NAME"  = p_name, BRAND_ID = p_brand_id, ENGINE_ID = p_engine_id, GEAR_ID = p_gear_id,
      FUEL_TYPE = p_fuel_type, VEHICLE_TYPE = p_vehicle_type
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_MODEL(p_id IN MODEL.ID%TYPE)
IS
  BEGIN

    DELETE FROM MODEL
    WHERE ID = p_id;

  END;
/


/* MOTORCYCLE */
CREATE OR REPLACE PROCEDURE INSERT_MOTORCYCLE(
  p_vehicle_id      IN MOTORCYCLE.VEHICLE_ID%TYPE,
  p_motorcycle_type IN MOTORCYCLE.MOTORCYCLE_TYPE%TYPE)
IS
  BEGIN

    INSERT INTO MOTORCYCLE ("VEHICLE_ID", "MOTORCYCLE_TYPE") VALUES (p_vehicle_id, p_motorcycle_type);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_MOTORCYCLE(
  p_vehicle_id      IN MOTORCYCLE.VEHICLE_ID%TYPE,
  p_motorcycle_type IN MOTORCYCLE.MOTORCYCLE_TYPE%TYPE)
IS
  BEGIN

    UPDATE MOTORCYCLE
    SET MOTORCYCLE_TYPE = p_motorcycle_type
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_MOTORCYCLE(p_vehicle_id IN MOTORCYCLE.VEHICLE_ID%TYPE)
IS
  BEGIN

    DELETE FROM MOTORCYCLE
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/


/* TRUCK */
CREATE OR REPLACE PROCEDURE INSERT_TRUCK(
  p_vehicle_id     IN TRUCK.VEHICLE_ID%TYPE,
  p_bale_capacity  IN TRUCK.BALE_CAPACITY%TYPE,
  p_trailer_volume IN TRUCK.TRAILER_VOLUME%TYPE,
  p_trailer_type   IN TRUCK.TRAILER_TYPE%TYPE)
IS
  BEGIN

    INSERT INTO TRUCK ("VEHICLE_ID", "BALE_CAPACITY", "TRAILER_VOLUME", "TRAILER_TYPE")
    VALUES (p_vehicle_id, p_bale_capacity, p_trailer_volume, p_trailer_type);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_TRUCK(
  p_vehicle_id     IN TRUCK.VEHICLE_ID%TYPE,
  p_bale_capacity  IN TRUCK.BALE_CAPACITY%TYPE,
  p_trailer_volume IN TRUCK.TRAILER_VOLUME%TYPE,
  p_trailer_type   IN TRUCK.TRAILER_TYPE%TYPE)
IS
  BEGIN

    UPDATE TRUCK
    SET BALE_CAPACITY = p_bale_capacity, TRAILER_VOLUME = p_trailer_volume, TRAILER_TYPE = p_trailer_type
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_TRUCK(p_vehicle_id IN TRUCK.VEHICLE_ID%TYPE)
IS
  BEGIN

    DELETE FROM TRUCK
    WHERE VEHICLE_ID = p_vehicle_id;

  END;
/


/* USER */
CREATE OR REPLACE PROCEDURE INSERT_USER(
  p_user_type  IN B21327694."USER".USER_TYPE%TYPE,
  p_first_name IN B21327694."USER".FIRST_NAME%TYPE,
  p_last_name  IN B21327694."USER".LAST_NAME%TYPE,
  p_username   IN B21327694."USER".USERNAME%TYPE,
  p_email      IN B21327694."USER".EMAIL%TYPE,
  p_phone      IN B21327694."USER".PHONE%TYPE,
  p_password   IN B21327694."USER".PASSWORD%TYPE)
IS
  BEGIN

    INSERT INTO B21327694."USER" ("USER_TYPE", "FIRST_NAME", "LAST_NAME", "USERNAME", "EMAIL", "PHONE", "PASSWORD")
    VALUES (p_user_type, p_first_name, p_last_name, p_username, p_email, p_phone, p_password);

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_USER(
  p_id         IN B21327694."USER".ID%TYPE,
  p_user_type  IN B21327694."USER".USER_TYPE%TYPE,
  p_first_name IN B21327694."USER".FIRST_NAME%TYPE,
  p_last_name  IN B21327694."USER".LAST_NAME%TYPE,
  p_username   IN B21327694."USER".USERNAME%TYPE,
  p_email      IN B21327694."USER".EMAIL%TYPE,
  p_phone      IN B21327694."USER".PHONE%TYPE,
  p_password   IN B21327694."USER".PASSWORD%TYPE)
IS
  BEGIN

    UPDATE B21327694."USER"
    SET USER_TYPE = p_user_type, FIRST_NAME = p_first_name, LAST_NAME = p_last_name,
      USERNAME    = p_username, EMAIL = p_email, PHONE = p_phone, PASSWORD = p_password
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_USER(p_id IN B21327694."USER".ID%TYPE)
IS
  BEGIN

    DELETE FROM B21327694."USER"
    WHERE ID = p_id;

  END;
/


/* VEHICLE */
CREATE OR REPLACE PROCEDURE INSERT_VEHICLE(
  p_model_id   IN  VEHICLE.MODEL_ID%TYPE,
  p_kilometer  IN  VEHICLE.KILOMETER%TYPE,
  p_plate      IN  VEHICLE.PLATE%TYPE,
  p_year       IN  VEHICLE.YEAR%TYPE,
  p_image_path IN  VEHICLE.IMAGE_PATH%TYPE,
  r_vehicle_id OUT VEHICLE.ID%TYPE)
IS
  BEGIN

    INSERT INTO VEHICLE ("MODEL_ID", "KILOMETER", "PLATE", "YEAR", "IMAGE_PATH")
    VALUES (p_model_id, p_kilometer, p_plate, p_year, p_image_path)
    RETURNING ID INTO r_vehicle_id;

  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_VEHICLE(
  p_id         IN VEHICLE.ID%TYPE,
  p_model_id   IN VEHICLE.MODEL_ID%TYPE,
  p_kilometer  IN VEHICLE.KILOMETER%TYPE,
  p_plate      IN VEHICLE.PLATE%TYPE,
  p_year       IN VEHICLE.YEAR%TYPE,
  p_image_path IN VEHICLE.IMAGE_PATH%TYPE)
IS
  BEGIN

    UPDATE VEHICLE
    SET MODEL_ID = p_model_id, KILOMETER = p_kilometer, PLATE = p_plate, YEAR = p_year, IMAGE_PATH = p_image_path
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_VEHICLE(p_id IN VEHICLE.ID%TYPE)
IS
  BEGIN

    DELETE FROM VEHICLE
    WHERE ID = p_id;

  END;
/


/* USER_LOG */
CREATE OR REPLACE PROCEDURE INSERT_USER_LOG(
  p_user_id     IN USER_LOG.USER_ID%TYPE,
  p_description IN USER_LOG.DESCRIPTION%TYPE)
IS
  BEGIN
    INSERT INTO USER_LOG ("USER_ID", "DESCRIPTION") VALUES (p_user_id, p_description);
  END;
/

CREATE OR REPLACE PROCEDURE UPDATE_USER_LOG(
  p_id          IN USER_LOG.ID%TYPE,
  p_user_id     IN USER_LOG.USER_ID%TYPE,
  p_description IN USER_LOG.DESCRIPTION%TYPE)
IS
  BEGIN

    UPDATE USER_LOG
    SET USER_ID = p_user_id, DESCRIPTION = p_description
    WHERE ID = p_id;

  END;
/

CREATE OR REPLACE PROCEDURE DELETE_USER_LOG(p_id IN USER_LOG.ID%TYPE)
IS
  BEGIN

    DELETE FROM USER_LOG
    WHERE ID = p_id;

  END;
/


/* USER_LOG 10 records control */
CREATE OR REPLACE TRIGGER USER_LOG_TEN_RECORD_TRG
  AFTER INSERT
  ON USER_LOG

  DECLARE
    log_count NUMBER;
  BEGIN
    /* Fetch current log count */
    SELECT COUNT(*)
    INTO log_count
    FROM USER_LOG;

    /* Check log_count whether exceed 10 or not */
    IF (log_count > 10)
    THEN
      /* Remove the oldest entry */
      DELETE FROM USER_LOG
      WHERE ID IN (
        SELECT ID
        FROM
          (
            SELECT ID
            FROM USER_LOG
            ORDER BY LOG_DATE ASC
          )
        WHERE ROWNUM <= 1
      );
    END IF;
  END;
/


/* Procedure for vehicle hiring works as a transaction */
CREATE OR REPLACE PROCEDURE RENT_VEHICLE(
  p_user_id      IN  B21327694."USER".ID%TYPE,
  p_vehicle_id   IN  VEHICLE.ID%TYPE,
  p_payment_type IN  HIRE.PAYMENT_TYPE%TYPE,
  p_start_date   IN  HIRE.START_DATE%TYPE,
  p_due_date     IN  HIRE.DUE_DATE%TYPE,
  r_message      OUT VARCHAR)
IS
    wrong_date EXCEPTION;
    vehicle_unavailable EXCEPTION;
  is_vehicle_available   NUMBER;
  branch_rltd_vehicle_id NUMBER;
  BEGIN
    SET TRANSACTION READ WRITE NAME 'RENT_VEHICLE';

    /* Check date correctness */
    IF (p_start_date < SYSDATE OR p_start_date >= p_due_date)
    THEN
      RAISE wrong_date;
    END IF;

    /* Fetch vehicle availability data */
    SELECT
      ID,
      IS_AVAILABLE
    INTO branch_rltd_vehicle_id, is_vehicle_available
    FROM BRANCH_RLTD_VEHICLE
    WHERE VEHICLE_ID = p_vehicle_id;

    /* Check vehicle availability */
    IF (is_vehicle_available = 0)
    THEN
      RAISE vehicle_unavailable;
    END IF;

    /* Fetch the overlapping hire if there is */
    SELECT COUNT(*)
    INTO is_vehicle_available
    FROM HIRE H
      JOIN BRANCH_RLTD_VEHICLE BV ON H.BRANCH_RLTD_VEHICLE_ID = BV.ID
    WHERE
      BV.VEHICLE_ID = p_vehicle_id AND START_DATE <= p_due_date AND DUE_DATE >= p_start_date;

    /* Check overlapping hire if there is */
    IF (is_vehicle_available > 0)
    THEN
      RAISE vehicle_unavailable;
    END IF;

    /* Everything is okay, hire the vehicle */
    INSERT_HIRE(branch_rltd_vehicle_id, p_user_id, p_payment_type, p_start_date, p_due_date);

    /* Create a log entry */
    INSERT_USER_LOG(p_user_id, 'Rented a vehicle');

    COMMIT;

    r_message := 'You have successfully rented the vehicle!';

    EXCEPTION
    WHEN wrong_date THEN
    r_message := 'Incorrect dates were given!';
    ROLLBACK;
    WHEN vehicle_unavailable THEN
    r_message := 'The vehicle is unavailable in the time interval!';
    ROLLBACK;
    WHEN OTHERS THEN
    r_message := 'Something went wrong!';
    ROLLBACK;
  END;
/
